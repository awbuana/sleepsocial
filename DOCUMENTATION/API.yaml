openapi: 3.0.0
info:
  title: SleepSocial API
  description: |
    API documentation for the SleepSocial application, a social sleep tracking platform.
    This API allows users to manage their profiles, track sleep, follow other users,
    and view a global sleep leaderboard.
  version: 1.0.0
servers:
  - url: http://localhost:3000/api/v1 # Adjust this URL based on your actual API base path
    description: Local Development Server
tags:
  - name: Users
    description: User management, profile viewing, and following/followers list.
  - name: Follows
    description: Managing follow and unfollow relationships between users.
  - name: Sleep Logs
    description: Creating, viewing, and updating sleep entries.
  - name: Leaderboard
    description: Accessing the global sleep performance leaderboard.
security:
  - bearerAuth: [] # All operations with 'authenticate!' will require this.
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT # Or 'Token' if you're using a simple token-based authentication.
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the user.
          readOnly: true
        name:
          type: string
          description: User's display name.
        num_following:
          type: integer
          description: Number of following
        num_followers:
          type: integer
          description: Number of followers
        created_at:
          type: string
          format: date-time
          description: Timestamp when the user account was created.
          readOnly: true
      example:
        id: 1
        name: "Alice Smith"
        num_following: 1
        num_followers: 1
        created_at: "2024-01-01T10:00:00Z"
    UserCreateRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
          description: The display name for the new user.
          example: "New User"
    Follow:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the follow relationship.
          readOnly: true
        user: # Nested object for the follower, typically included via serializer
          $ref: '#/components/schemas/User'
        target_user: # Nested object for the followed user, typically included via serializer
          $ref: '#/components/schemas/User'
        created_at:
          type: string
          format: date-time
          description: Timestamp when the follow relationship was created.
          readOnly: true
      example:
        id: 101
        created_at: "2024-05-15T12:00:00Z"
        user: { id: 1, name: "Alice" } # Simplified for example
        target_user: { id: 2, name: "Bob" } # Simplified for example
    FollowCreateRequest:
      type: object
      required:
        - target_user_id
      properties:
        target_user_id:
          type: integer
          format: int64
          description: The ID of the user to follow.
          example: 2
    SleepLog:
      type: object
      properties:
        id:
          type: integer
          format: int64
          description: Unique identifier for the sleep log.
          readOnly: true
        clock_in:
          type: string
          format: date-time
          description: Timestamp when sleep started.
          example: "2024-06-20T22:00:00Z"
        clock_out:
          type: string
          format: date-time
          description: Timestamp when sleep ended. This is null if the log is still active/pending.
          example: "2024-06-21T06:00:00Z"
        sleep_duration_in_minutes: # Assuming this is a calculated field, e.g., in minutes
          type: integer # Corrected for OpenAPI 3.1.0 nullable integer
          format: int64
          description: Total sleep duration in minutes. Calculated if `clock_out` is present.
          example: 480 # (8 hours)
        created_at:
          type: string
          format: date-time
          description: Timestamp when the sleep log record was created.
          readOnly: true
        updated_at:
          type: string
          format: date-time
          description: Timestamp when the sleep log record was last updated.
          readOnly: true
        user: # Nested User object for preload
          $ref: '#/components/schemas/User'
      example:
        id: 201
        clock_in: "2024-06-20T22:00:00Z"
        clock_out: "2024-06-21T06:00:00Z"
        sleep_duration_in_minutes: 480
        created_at: "2024-06-21T06:00:00Z"
        updated_at: "2024-06-21T06:00:00Z"
        user: { id: 1, name: "Alice" }
    SleepLogCreateRequest:
      type: object
      properties:
        clock_in:
          type: string
          format: date-time
          description: Optional. Timestamp when sleep started. If not provided, defaults to the current time.
          example: "2024-06-22T23:00:00Z"
        clock_out:
          type: string
          format: date-time
          description: Optional. Timestamp when sleep ended. If provided, the log is marked as complete.
          example: "2024-06-23T07:00:00Z"
    SleepLogClockOutRequest:
      type: object
      required:
        - clock_out
      properties:
        clock_out:
          type: string
          format: date-time
          description: The timestamp when sleep ended.
          example: "2024-06-23T07:00:00Z"
    Error:
      type: object
      properties:
        error:
          type: string
          description: A human-readable error message.
          example: "User must clock out pending log first"
    GenericMessage:
      type: object
      properties:
        message:
          type: string
          description: A simple success or informational message.
          example: "Unfollow successfully"
  responses:
    PaginatedUsers:
      description: A paginated list of user profiles.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/User'
              meta:
                type: object
                properties:
                  prev_cursor:
                    type: string
                    description: Cursor for the previous page of results.
                  next_cursor:
                    type: string
                    description: Cursor for the next page of results.
    PaginatedFollows:
      description: A paginated list of follow relationships.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/Follow'
              meta:
                type: object
                properties:
                  prev_cursor:
                    type: string
                  next_cursor:
                    type: string
    PaginatedSleepLogs:
      description: A paginated list of sleep logs.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SleepLog'
              meta:
                type: object
                properties:
                  prev_cursor:
                    type: string
                  next_cursor:
                    type: string
    LeaderboardSleepLogs:
      description: A list of sleep logs for the leaderboard, with offset/limit metadata.
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                type: array
                items:
                  $ref: '#/components/schemas/SleepLog'
              meta:
                type: object
                properties:
                  offset:
                    type: integer
                    description: The number of records skipped.
                  limit:
                    type: integer
                    description: The maximum number of records returned.
    GenericMessage:
      description: GenericMessage
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericMessage'
    NotFound:
      description: The requested resource could not be found.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Authentication credentials were missing or invalid.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Forbidden:
      description: The authenticated user does not have permission to access the resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnprocessableEntity:
      description: The request was well-formed but could not be processed due to semantic errors (e.g., validation failure).
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

paths:
  /users:
    get:
      tags:
        - Users
      summary: Get all users
      description: Retrieve a paginated list of all registered users in the system.
      parameters:
        - name: limit
          in: query
          description: Number of user records to return per page.
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: A cursor string used for cursor-based pagination to fetch the next page of results.
          schema:
            type: string
        - name: before
          in: query
          description: A cursor string used for cursor-based pagination to fetch the previous page of results.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PaginatedUsers'
    post:
      tags:
        - Users
      summary: Create a new user
      description: Create a new user account with a name, email, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreateRequest'
      responses:
        '201':
          description: User account created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /users/{id}:
    get:
      tags:
        - Users
      summary: Get user by ID
      description: Retrieve a specific user's profile details by their unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response with the requested user's data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{id}/following:
    get:
      tags:
        - Users
      summary: Get users a user is following
      description: Retrieve a paginated list of users that a specific user (identified by `id`) is actively following.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user whose followings are to be retrieved.
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of user records to return per page.
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: A cursor string used for cursor-based pagination to fetch the next page of results.
          schema:
            type: string
        - name: before
          in: query
          description: A cursor string used for cursor-based pagination to fetch the previous page of results.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PaginatedFollows'
        '404':
          $ref: '#/components/responses/NotFound'
  /users/{id}/followers:
    get:
      tags:
        - Users
      summary: Get users following a user
      description: Retrieve a paginated list of users who are following a specific user (identified by `id`).
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the user whose followers are to be retrieved.
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of user records to return per page.
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: A cursor string used for cursor-based pagination to fetch the next page of results.
          schema:
            type: string
        - name: before
          in: query
          description: A cursor string used for cursor-based pagination to fetch the previous page of results.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PaginatedFollows'
        '404':
          $ref: '#/components/responses/NotFound'
  /follows:
    get:
      tags:
        - Follows
      summary: Get follow relationships
      description: |
        Retrieve a paginated list of follow relationships.
        - If `user_id` is provided, filters relationships where that user is the follower.
        - If `user_id` is not provided but the request is authenticated, filters by the current authenticated user's ID.
        - If no `user_id` and not authenticated, returns all follow relationships (ordered by ID descending).
      parameters:
        - name: user_id
          in: query
          description: Optional. Filter follow relationships by the ID of the user who initiated the follow.
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of records to return per page.
          schema:
            type: integer
            default: 20
        - name: after
          in: query
          description: A cursor string used for cursor-based pagination to fetch the next page of results.
          schema:
            type: string
        - name: before
          in: query
          description: A cursor string used for cursor-based pagination to fetch the previous page of results.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PaginatedFollows'
    post:
      tags:
        - Follows
      summary: Create a follow relationship
      description: Allows an authenticated user to establish a follow relationship with another user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowCreateRequest'
      responses:
        '201':
          description: Follow relationship created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Follow'
        '400':
          description: Bad Request (e.g., attempting to follow oneself).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: Target user not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /follows/:
    delete:
      tags:
        - Follows
      summary: Unfollow a user
      description: Allows an authenticated user to unfollow a previously followed target user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FollowCreateRequest'
      responses:
        '200':
          description: Unfollow successful.
          $ref: '#/components/responses/GenericMessage'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          description: The follow relationship was not found for the current user and target user.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /leaderboards:
    get:
      tags:
        - Leaderboard
      summary: Get global sleep leaderboard
      description: Retrieve a paginated list of top sleep logs for the global leaderboard, sorted by sleep duration. Requires authentication.
      security:
        - bearerAuth: []
      parameters:
        - name: limit
          in: query
          description: The maximum number of sleep logs to return in the leaderboard.
          schema:
            type: integer
            default: 20
        - name: offset
          in: query
          description: The number of sleep logs to skip from the beginning of the leaderboard results.
          schema:
            type: integer
            default: 0
      responses:
        '200':
          $ref: '#/components/responses/LeaderboardSleepLogs'
        '401':
          $ref: '#/components/responses/Unauthorized'
  /sleep_logs:
    get:
      tags:
        - Sleep Logs
      summary: Get sleep logs
      description: |
        Retrieve a paginated list of sleep logs.
        - If `user_id` is provided, filters logs by the specified user.
        - If `user_id` is not provided but the request is authenticated, returns logs for the current authenticated user.
        - If neither, returns all sleep logs.
      parameters:
        - name: user_id
          in: query
          description: Optional. Filter sleep logs by the ID of the user who owns them.
          schema:
            type: integer
            format: int64
        - name: limit
          in: query
          description: Number of records to return per page.
          schema:
            type: integer
            default: 20
        - name: cursor
          in: query
          description: A cursor string used for cursor-based pagination.
          schema:
            type: string
      responses:
        '200':
          $ref: '#/components/responses/PaginatedSleepLogs'
    post:
      tags:
        - Sleep Logs
      summary: Create a new sleep log
      description: Allows an authenticated user to create a new sleep log entry. `clock_in` can be optionally provided, otherwise it defaults to the current time.
      security:
        - bearerAuth: []
      requestBody:
        required: false # clock_in defaults to Time.now.utc if not provided
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SleepLogCreateRequest'
      responses:
        '201':
          description: Sleep log created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SleepLog'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
  /sleep_logs/{id}:
    get:
      tags:
        - Sleep Logs
      summary: Get sleep log by ID
      description: Retrieve a specific sleep log entry by its unique identifier.
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the sleep log to retrieve.
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful response with the requested sleep log data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SleepLog'
        '404':
          $ref: '#/components/responses/NotFound'
  /sleep_logs/{id}/clock-out:
    patch:
      tags:
        - Sleep Logs
      summary: Clock out a sleep log
      description: Allows an authenticated user to clock out an existing active sleep log.
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          description: Unique identifier of the sleep log to clock out.
          schema:
            type: integer
            format: int64
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SleepLogClockOutRequest'
      responses:
        '200':
          description: Sleep log successfully clocked out.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SleepLog'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '422':
          $ref: '#/components/responses/UnprocessableEntity'
